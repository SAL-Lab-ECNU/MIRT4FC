install.packages("D:/New R/FCiStEM_0.1.0.tar.gz", repos = NULL, type = "source")
D <- 6
nitem.per.dim <- 10
nblock <- D * nitem.per.dim / 3
set.seed(123456)
item.par <- data.frame(a=seq_len(D*nitem.per.dim))
item.par <- within(item.par,{
a <- runif(D*nitem.per.dim,0.7,3)
b <- rnorm(D*nitem.per.dim)
d <- a*b
})
BID <- data.frame(Block=rep(1:nblock,each=3),
Item=rep(1:3,nblock),
Dim=c(combn(D,3)[,sample(choose(D,3),nblock,replace = TRUE)]))
item.par$d <- c(t(aggregate(item.par$d,by=list(BID$Block),function(x)x-mean(x))[,-1]))
N <- 1000
v <- matrix(0.5,D,D)
diag(v) <- 1
theta <- mvnfast::rmvn(N,seq(-1,1,length.out = D),sigma = v)
Y <- data.sim(item.par,theta,BID,blocksize=3,res='rank')
library(FCiStEM)
Y <- data.sim(item.par,theta,BID,blocksize=3,res='rank')
x <- StEM(Y,BID,maxitr = 100,blocksize=3,res='rank',fix.sigma = TRUE)
#'
#' @return A list of data; including estimated a, d, and sigm parameters,
#'    total batch number, final chain size, burn-in size, time.
#'
#' @importFrom stats cor optim rnorm
#' @importFrom utils install.packages installed.packages
#' @importFrom doParallel registerDoParallel
#' @importFrom foreach foreach registerDoSEQ
#' @importFrom coda
#' @importFrom Matrix
??detectCores
library(parallel)
compiler::setCompilerOptions(suppressAll = TRUE)
load_all()
library(devtools)
load_all()
D <- 6
nitem.per.dim <- 10
nblock <- D * nitem.per.dim / 3
set.seed(123456)
item.par <- data.frame(a=seq_len(D*nitem.per.dim))
item.par <- within(item.par,{
a <- runif(D*nitem.per.dim,0.7,3)
b <- rnorm(D*nitem.per.dim)
d <- a*b
})
BID <- data.frame(Block=rep(1:nblock,each=3),
Item=rep(1:3,nblock),
Dim=c(combn(D,3)[,sample(choose(D,3),nblock,replace = TRUE)]))
item.par$d <- c(t(aggregate(item.par$d,by=list(BID$Block),function(x)x-mean(x))[,-1]))
N <- 1000
v <- matrix(0.5,D,D)
diag(v) <- 1
theta <- mvnfast::rmvn(N,seq(-1,1,length.out = D),sigma = v)
Y <- data.sim(item.par,theta,BID,blocksize=3,res='rank')
x <- StEM(Y,BID,maxitr = 100,blocksize=3,res='rank',fix.sigma = TRUE)
library(devtools)
load_all()
D <- 6
nitem.per.dim <- 10
nblock <- D * nitem.per.dim / 3
set.seed(123456)
# item parameters
item.par <- data.frame(a=seq_len(D*nitem.per.dim))
item.par <- within(item.par,{
a <- runif(D*nitem.per.dim,0.7,3)
a[1:5] <- -1*a[1:5]
a[8] <- -1*a[8]
# a <- rlnorm(D*nitem.per.dim,sdlog = 0.5)
b <- rnorm(D*nitem.per.dim)
d <- a*b
})
#BID
BID <- data.frame(Block=rep(1:nblock,each=3),
Item=rep(1:3,nblock),
Dim=c(combn(D,3)[,sample(choose(D,3),nblock,replace = T)]))
N <- 1000
v <- matrix(0.5,D,D)
diag(v) <- 1
eigen(v)$values
theta <- mvnfast::rmvn(N,seq(-1,1,length.out = D),sigma = v)
item.par$d <- c(t(aggregate(item.par$d,by=list(BID$Block),function(x)x-mean(x))[,-1]))
Y <- data.sim_3_pick(item.par,theta,BID)
Y <- data.sim_3_rank(item.par,theta,BID)
x <- stEM_3_rank(Y,BID,maxitr = 100,positive = sign(item.par$a),sigma = v,fix.sigma = FALSE)
load_all()
load_all()
x <- stEM_3_rank(Y,BID,maxitr = 100,positive = sign(item.par$a),sigma = v,fix.sigma = FALSE)
load_all()
x <- stEM_3_rank(Y,BID,maxitr = 100,positive = sign(item.par$a),sigma = v,fix.sigma = FALSE)
load_all()
x <- stEM_3_rank(Y,BID,maxitr = 100,positive = sign(item.par$a),sigma = v,fix.sigma = FALSE)
load_all()
Y <- data.sim_3_pick(item.par,theta,BID)
x <- stEM_3_pick(Y,BID,maxitr = 100,positive = sign(item.par$a),sigma = v,fix.sigma = FALSE)
load_all()
load_all()
x <- stEM_3_pick(Y,BID,maxitr = 100,positive = sign(item.par$a),sigma = v,fix.sigma = FALSE)
function(i,arm.sampler_3_pick,theta,fix.sigma){
a=armspp::arms_gibbs(n_samples = 1,previous = theta[i,],log_pdf = arm.sampler_3_pick,
lower = rep(-6,D),upper = rep(6,D),metropolis = fix.sigma)
return(a)
}
load_all()
x <- stEM_3_pick(Y,BID,maxitr = 100,positive = sign(item.par$a),sigma = v,fix.sigma = FALSE)
library(devtools)
load_all()
D <- 6
nitem.per.dim <- 10
nblock <- D * nitem.per.dim / 3
set.seed(123456)
# item parameters
item.par <- data.frame(a=seq_len(D*nitem.per.dim))
item.par <- within(item.par,{
a <- runif(D*nitem.per.dim,0.7,3)
a[1:5] <- -1*a[1:5]
a[8] <- -1*a[8]
# a <- rlnorm(D*nitem.per.dim,sdlog = 0.5)
b <- rnorm(D*nitem.per.dim)
d <- a*b
})
#BID
BID <- data.frame(Block=rep(1:nblock,each=3),
Item=rep(1:3,nblock),
Dim=c(combn(D,3)[,sample(choose(D,3),nblock,replace = T)]))
N <- 1000
v <- matrix(0.5,D,D)
diag(v) <- 1
eigen(v)$values
theta <- mvnfast::rmvn(N,seq(-1,1,length.out = D),sigma = v)
item.par$d <- c(t(aggregate(item.par$d,by=list(BID$Block),function(x)x-mean(x))[,-1]))
Y <- data.sim_3_pick(item.par,theta,BID)
library(devtools)
load_all()
Y <- data.sim_3_pick(item.par,theta,BID)
x <- stEM_3_pick(Y,BID,maxitr = 100,positive = sign(item.par$a),sigma = v,fix.sigma = FALSE)
